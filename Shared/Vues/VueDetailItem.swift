//
//  ListItemView.swift
//  OrderedList
//
//  Created by SchwiftyUI on 9/2/19.
//  Copyright ¬© 2019 SchwiftyUI. All rights reserved.
//

import SwiftUI
import CloudKit
import MapKit
import os.log


/// Vue statique qui affiche les propri√©t√©es de l'Item pass√© en argument
struct VueDetailItem: View {
    
    
    @Environment(\.managedObjectContext) var contexte
    @Environment(\.presentationMode)     var modePresentation

    @EnvironmentObject private var persistance: ControleurPersistance
    
    @StateObject private var Œû = ViewModel()
    
    // l'appel depuis ListeItem impose que les @State item et laRegion soient publiques (pas private)
    // 'VueDetailItem' initializer is inaccessible due to 'private' protection level ??
    
    // ‚ôî La Source de verit√© pour Item ‚ôî
    //
    /// Argument, Item en cours d'√©dition propri√©t√© de VueDetailItem
    @StateObject private var item: Item
//    @State  private var item_ : Item


    /// Argument, R√©gion g√©ographique ou se situe l'Item
    @State  private var laR√©gion : MKCoordinateRegion
    //TODO: Pas utilis√© ?
    @State var message: String
    
    let longitudeInitiale : Double
    let latitudeInitiale  : Double
    
    @State private var partage: CKShare? // initialis√© on Appear
    @State private var showShareSheet = false
    @State private var showEditSheet  = false
    
    let coordinateurPartage : D√©l√©gu√©DuControleurDePartageCharg√©DeLaCoordination

    
    init (item:Item) { //}, laR√©gion:MKCoordinateRegion) {
//        _item_    = State(wrappedValue: item)
        _item     = StateObject<Item>(wrappedValue: item)
        
        _laR√©gion = State(wrappedValue: item.r√©gion) //  laR√©gion:
        _message  = State(wrappedValue: item.leMessage)
        Logger.interfaceUtilisateur.debug("Init de VueDetailItem \(item.leTitre) \(item.longitude) \(item.latitude) (avant d√©placement)")
        longitudeInitiale = item.longitude
        latitudeInitiale  = item.latitude
        
        coordinateurPartage = D√©l√©gu√©DuControleurDePartageCharg√©DeLaCoordination(item: item)
        coordinateurPartage.tester()

    }
    

    
    
    var body: some View {
        VStack {
            Group {
                descriptionPropri√©t√©s
                Divider()
                descriptionCollaboration
                }
            .frame(maxWidth: .infinity, alignment: .leading)
            .padding(.leading)
            //TODO: A supprimer ?
            .onChange(of: item) {msg in Logger.interfaceUtilisateur.info("change item Message \(msg.leMessage)")}

            Spacer()
//            Text("VueDetailItem item      \(item.latitude), \(item.longitude)")
//            Text("VueDetailItem $laRegion \(item.latitude), \(item.longitude)")

            
            // Besoin de retour d'informations de la part de VueCarteItem
            // donc Binding pour item et laRegion
            // RQ1 : la position de l'Item n'est pas modifi√©e par la Vue CarteItem
            // RQ2 : la r√©gion affich√©e peut √™tre deplac√©e par l'utilisateur
            // 17 Mars
            VueCarteItem( item,  uneRegion: $laR√©gion )
            
                .isHidden( (item.isDeleted || item.isFault) ? true : false  )
                .opacity(item.valide ? 1.0 : 0.1)
                        

            if let _share = partage {

            Section {
//              if let _share = partage {
                List {
                ForEach(_share.participants, id: \.self) { participant in
                  VStack(alignment: .leading) {
                    Text(participant.userIdentity.nameComponents?.formatted(.name(style: .long)) ?? "")
                      .font(.headline)
                    Text("Accr√©ditation: \(string(for: participant.acceptanceStatus))")
                      .font(.subheadline)
                    Text("R√¥le: \(string(for: participant.role))")
                      .font(.subheadline)
                    Text("Permissions: \(string(for: participant.permission))")
                      .font(.subheadline)
                  }
                  .padding(.bottom, 8)
                } // for each
                }
              } // section
            header: { Text("Participants") }
            } // si partage
        } // VStack
        
        .sheet(isPresented: $Œû.feuilleModificationItemPresent√©e) {
            NavigationView {
            VueModifItemSimple(item) { aSauver, itemEnRetour in
                Logger.interfaceUtilisateur.info("üåê retour de VueModifItemSimple(item) depuis VueDetailItem : \(aSauver ? "SAUVER" : "ABANDONNER") \(itemEnRetour.leTitre) d√©placement de \(item.longitude) \(item.latitude) \(longitudeInitiale) \(latitudeInitiale) vers \(itemEnRetour.longitude) \(itemEnRetour.latitude)")
                Œû.feuilleModificationItemPresent√©e = false
                if aSauver {
                    // Mettre √† jour les coordonn√©es de l'item avec le centre de la r√©gion cartographique affich√©e
                    withAnimation(.easeInOut(duration: 20)) {
                        laR√©gion.centrerSur(itemEnRetour)
                        //itemEnRetour.centrerSur(laR√©gion)
                        }
                    persistance.sauverContexte(depuis: "Retour VueModifItemSimple") //#function)
                    }
                else {
                    persistance.retourArriereContexte()
                    }
                }
            } // NavigationView
        
            .border( .red, width: 0.3)
            .ignoresSafeArea()

            } //Sheet modif

        
        .sheet(isPresented: $showShareSheet) { //}, content: {
          let _ = print("„ÄΩÔ∏è„ÄΩÔ∏è - Appel de VuePartageCloudKit depuis VueDetailItem")
          if let __share = partage {
//              let _ = print("„ÄΩÔ∏è„ÄΩÔ∏è Cr√©ation du coordinateur de partage de", item.leTitre)
//              let coord = CoordinateurDePartageCloudKit(item: item)
              let _ = print("„ÄΩÔ∏è„ÄΩÔ∏è Le coordianateur", coordinateurPartage, "est utilis√© pour", item.leTitre)
              
              VuePartageCloudKit(
                // CloudSharingView(share: share, container: stack.ckContainer, destination: destination)
                partage: __share,
                conteneurCK: persistance.conteneurCK, //  . stack.ckContainer,
                itemAPartager: item,
                coordinateur: coordinateurPartage) //CoordinateurDePartageCloudKit(item: item))
              .border( .red, width: 0.3)
              .ignoresSafeArea()
          }
        }  // Sheet partage // )

        
        .toolbar {
            // Barre d'outils pour VuDetailItem
            ToolbarItemGroup(placement: .navigationBarTrailing)
            { barreMenu }
            }
        
        .onAppear() { //perform: {
//            let image = UIImage(named: "Soucoupe")
//            let donn√©esImage = image?.pngData()
//            print("‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏èmake image largeur :", image?.size.width ?? 0, "x hauteur :", image?.size.height ?? 0,  ", donn√©es:" , donn√©esImage?.count, "octets")//   isEmpty ?.debugDescription)
            // 4032‚Ää√ó‚Ää3024     // 14‚ÄØ747‚ÄØ097
            apparaitre()
            Logger.interfaceUtilisateur.info("onAppear VueDetailItem \(item.leMessage) \(item.valeur) ")
            let _ = item.verifierCoh√©rence(depuis: #file)
            Logger.interfaceUtilisateur.info("„ÄΩÔ∏è onAppear VueDetailItem")
            self.partage = persistance.obtenirPartage(item)
        } //)
        
       // .onAppear() {}
    } // Body
    
    
    
    
    
    
    //MARK: - Sous Vues -
    
    var descriptionPropri√©t√©s: some View {
        
        VStack(alignment: .leading) {

            Etiquette("Identifiant", valeur: item.id?.uuidString ?? "‚ùå")
            Etiquette("Message", valeur: item.leMessage)

            Text("Cr√©e le ").foregroundColor(.secondary)
            + Text(" \( formatDate.string(from: item.horodatage )) ")
            + Text(" √†")
                .foregroundColor(.secondary)
            + Text(" \(item.horodatage, style: .time)")
            + Text(", par ")
                .foregroundColor(.secondary)
            + Text(" \(item.createur ?? "inconnu")")
            + Text(".")
                .foregroundColor(.secondary)

            HStack {
                Text ("En mode :")
                    .foregroundColor(.secondary)
                + Text(" \(item.mode.rawValue).  ")
                Text("Couleur : ")
                    .foregroundColor(.secondary)
                Circle()
                    .fill(item.coloris)
                    .clipShape(Circle())
                    .overlay( Circle()
                        .strokeBorder(.primary, lineWidth: 0.5)
                        )
                    .frame(width: 20, height: 20)
                }

            Text("Valeur :").foregroundColor(.secondary)
            + Text("\(item.valeur)")
//                + Text( item.valeur == valeurLocale ? "üÜó" : "„Ä∞Ô∏è")
            }
        }
    
    
    var descriptionCollaboration: some View {
        
        VStack(alignment: .leading) {
            Etiquette("Partage", valeur: partage != nil)
            Etiquette("Principal", valeur: item.principal?.nom ?? "‚ùå")

            Text("Membre de")
                .foregroundColor(.secondary)
            + Text(" \(item.lesGroupes.count ) ")
            + Text(" groupes")
                .foregroundColor(.secondary)

            ForEach( Array(item.lesGroupes) )
                { groupe in Text("¬∞ \(groupe.nom ?? "..") ")  } .padding(.leading)

            }
        }
    
    
    
          
    
    // L'avantage d'une propriet√© comme ici, sur une vue d√©crite dans un autre fichier
    // c'est le partage d'information qui est direct
    var barreMenu: some View {
        HStack {
            Spacer()

            Button(action: { Œû.feuilleModificationItemPresent√©e.toggle() }) {
                VStack {
                    Image(systemName: "square.and.pencil")
                    Text("Modifier").font(.caption)
                    }
              }.buttonStyle(.borderedProminent)

            Button(role: .destructive, action: {  }) {
                VStack {
                    Image(systemName: "trash")
                    Text("Supprimer").font(.caption)
                    }
              }.buttonStyle(.borderedProminent)
            
              Button {  //stack
                let _ = print("„ÄΩÔ∏è Bouton partage", persistance.estPartag√©(objet: item).voyant)
//                 !persistance.isShared(object: item)
                if !persistance.estPartag√©(objet: item) {
                    let _ = print("„ÄΩÔ∏è \(item.leTitre) n'est pas d√©j√† partag√©")
                  Task { await creerUnPartageCK(item) }
                  }
                showShareSheet = true
              } label: {
                Image(systemName: "square.and.arrow.up")
              }
            
            
            
            

            Spacer()
            }
        }
    
    func apparaitre() {}
}

// MARK: Aides au Partage : participant permission, methodes and propriet√©s ...
extension VueDetailItem {
  private func creerUnPartageCK(_ item: Item) async {
    do {
        // Associer un item √† un (nouveau ou existant) partage
        print("„ÄΩÔ∏è üîÜ Cr√©ation d'un partage")
        let (_, _share, _) = try await persistance.conteneur.share([item], to: nil)//    stack.persistentContainer.share([item], to: nil)
        _share[CKShare.SystemFieldKey.title] = "Participer √† \(item.titre ?? "...")"
        
//        if let cover = album["cover"] as? UIImage, let data = cover.pngData() {
//            _share[CKShare.SystemFieldKey.thumbnailImageData] = data
//        }
//        itemThumbnailData(for: UICloudSharingController) -> Data? {
           let image = UIImage(named: "Partage")
           let donn√©esImage = image?.pngData()
        _share[CKShare.SystemFieldKey.thumbnailImageData] = donn√©esImage

        // Type UTI qui decrit le contenu partag√©
        _share[CKShare.SystemFieldKey.shareType] = "com.arachante.nimbus.item"
        
        
        
      self.partage = _share
      }
    catch { print("‚ùóÔ∏èImpossible de creer un partage") }
    }

  private func string(for permission: CKShare.ParticipantPermission) -> String {
    switch permission {
        case .unknown:
          return "Inconnu" //"Unknown"
        case .none:
          return "Sans" //"None"
        case .readOnly:
          return "Lecture seule" //"Read-Only"
        case .readWrite:
          return "Lecture/√âcriture" //"Read-Write"
        @unknown default:
          fatalError("Une nouvelle valeur inconnue pour CKShare.Participant.Permission")
        }
    }

  private func string(for role: CKShare.ParticipantRole) -> String {
    switch role {
        case .owner:
          return "Propri√©taire" //"Owner"
        case .privateUser:
          return "Utilisateur Priv√©" // participant ? //"Private User"
        case .publicUser:
          return "Utilisateur Publique" // "Public User"
        case .unknown:
          return "Inconnu" //Unknown"
        @unknown default:
          fatalError("Une nouvelle valeur inconnue pour  CKShare.Participant.Role")
        }
    }

  private func string(for acceptanceStatus: CKShare.ParticipantAcceptanceStatus) -> String {
    switch acceptanceStatus {
        case .accepted:
          return "Accept√©" //"Accepted"
        case .removed:
          return "R√©voqu√©" //Enlev√©, R√©voqu√© "Removed"
        case .pending:
          return "Invit√©" //"Invited"
        case .unknown:
          return "Inconnu" //"Unknown"
        @unknown default:
          fatalError("Une nouvelle valeur inconnue pour CKShare.Participant.AcceptanceStatus")
        }
    }

  private var canEdit: Bool { persistance.jePeuxEditer(objet: item) }
    
}
