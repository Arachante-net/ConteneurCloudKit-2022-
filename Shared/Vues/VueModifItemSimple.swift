//
//
//  Created by me
//  Copyright ¬© 2021 Arachante
//

import SwiftUI
import MapKit
import os.log


/// Vue permettant d'√©diter les propri√©t√©es d'un Item
/// -  `VueModifItem(item) { valeur in ...` code √† √©xecuter afin de retourner des infos √† la vue appelante }
/// -  `VueModifItem(groupe) { ... }`
/// 
///
/// - Si l'appel s'effectue sur un groupe, la vue √©dite l'item principal de ce groupe
///
/// - Deux modes de validation sont envisageables :
///     - global : toutes les √©volutions de propriet√© sont valid√©es ensemble par le bouton "VALIDER"
///     - individuel : propriet√© par propriet√©, le bouton global s'appele plut√¥t "TERMINER"

struct VueModifItemSimple: View {
    
    @EnvironmentObject private var persistance : ControleurPersistance

  
    /// L'Iten cour d'√©dition, ( il est la propri√©t√© de  la vue m√®re)
    @ObservedObject var item: Item
    /// Groupe en cours d'edition, propri√©t√© de VueDetailGroupe
    @ObservedObject var groupeParent: Groupe
    
    /// La r√©gion g√©ographique ou se situe l'Item,
    /// elle sera eventuellement modifi√©e par  la  vue Map (et par l'utilisateur)
    @State var laR√©gion: MKCoordinateRegion
    
    typealias RetourInfoItemAchev√©e = (Bool, Item) -> Void
    /// Code √† effectuer lorsque termin√©e afin de retourner des info √† la vue m√®re
    ///  true si l'item √† √©volu√©,  aussi la nouvelle valeur de l'item
    let reponseAmaM√®re : RetourInfoItemAchev√©e
    

    @Environment(\.managedObjectContext) var contexte
    @Environment(\.presentationMode)     var modePresentation
    
    // Rejet de la pr√©sentation actuelle //pas utilis√©e
    @Environment(\.dismiss) var cloreLaVueActuelle


        
    @FocusState var champTexteActif: Bool
    
    @State var saisieMessageTermin√©e:Bool = false
    
    private enum ChampTexte: Int, CaseIterable { case message, signature }
     
        @State private var message  : String = ""
        @State private var signature: String = ""
     
        @FocusState private var champAvecFocus: ChampTexte?
    
    
    /// Modifier/Editer l'Item pass√© pass√© en argument
    init(_ unItem: Item, achev√©e: @escaping  RetourInfoItemAchev√©e) {

        _item = ObservedObject<Item>(wrappedValue : unItem)
        
        // retrouver le groupe principal parent de cet item
        if let parent = unItem.principal {
            _groupeParent   = ObservedObject<Groupe>(wrappedValue : parent)
            }
        // ou un nouveau groupe s'il n'existe pas
        else {
            _groupeParent = ObservedObject<Groupe>(wrappedValue : Groupe() )
            }

        _laR√©gion = State(wrappedValue : unItem.r√©gion)
        
        reponseAmaM√®re = achev√©e
        }
    
    
    /// Modifier l'Item Principal du Groupe pass√© en argument
    init(_ unGroupe: Groupe, achev√©e: @escaping  RetourInfoItemAchev√©e) {

        _groupeParent   = ObservedObject<Groupe>(wrappedValue : unGroupe)
        
        if let principal = unGroupe.principal {
            _item     = ObservedObject<Item>(wrappedValue : principal)
            _laR√©gion = State(wrappedValue : principal.r√©gion)
            }
        else {
            _item     = ObservedObject<Item>(wrappedValue : Item() )
            _laR√©gion = State(wrappedValue : MKCoordinateRegion.init() )
            }
        
        reponseAmaM√®re = achev√©e
        
        Logger.interfaceUtilisateur.info("üåê Init de VueModifItemSimple pour le groupe \(unGroupe.leNom), position√© en  \(unGroupe.principal!.longitude) \(unGroupe.principal!.latitude) ")

        }

    var body: some View {
//        NavigationView {
        VStack(alignment: .leading , spacing: 2) {
            VStack {
                VStack {
                    TextField("Titre carte :",
                              text: $item.leTitre
                              )
                        .textFieldStyle(.roundedBorder)
                        .foregroundColor(.secondary)
                        .border(.secondary)
                        .focused($champTexteActif)
                        .submitLabel(.done)
                        .onSubmit {Logger.interfaceUtilisateur.info("Submit")}
                    // 15 mars
//                        .toolbar {
//                            ToolbarItemGroup(placement: .keyboard) {
//                                Button("Clic") { champTexteActif = false }
//                                }
//                            }

                    Stepper("\(item.valeur) points", value: $item.valeur, in: 0...10, step: 1)
                        .padding(.horizontal)
                    
                    Text("item.valeur : \(item.valeur) ") //  valeurLocale : \(valeurLocale)")

                    Toggle("Valide", isOn: $item.valide)
                    HStack {
                        ColorPicker("Couleur", selection: $item.coloris, supportsOpacity: false)
                            .onChange(of: item.coloris) { [weak item] nouvelleCouleur in
//                                persistance.sauverContexte("Item")
                                Logger.interfaceUtilisateur.info("‚òëÔ∏è Nouvele couleur \(nouvelleCouleur) -- \(String(describing: item?.coloris))")
                                //FIXME: !! Y-a vraiment besoin de cette bidouille ??
                                // Comment avoir la valeur du Stepper affich√©e en direct (et sauvegard√©e)
                                // Honte sur moi, je ne trouve pas le mecanisme √©legant pour r√©amiser cela
//                                groupeParent.integration.toggle()
                                // 5 Avril
                                groupeParent.objectWillChange.send()
                                
                                }
                      

                        }
                        .frame(maxWidth: .infinity , maxHeight: 30)
                        .background(item.coloris)

                    }
                    .border(.secondary)
                
                }
                .padding(.horizontal)
//                .onChange(of: item.coordonn√©es) { nouvelItem in
//                    persistance.sauverContexte("Item")
//                    print("‚òëÔ∏è Nouvel Item coordonn√©es \(nouvelItem) ")
//                    groupeParent.integration.toggle()
//                    }
            HStack {
                Text("Message : ") //\(item.leMessage)")
                TextField("Message", text: $item.leMessage) {
                        Logger.interfaceUtilisateur.debug("DIRECT Soumission du message \(item.leMessage)")
                        saisieMessageTermin√©e = true
                        }
                    .onSubmit(of: .text) {
                        Logger.interfaceUtilisateur.debug("Soumission du message \(item.leMessage)")
                        saisieMessageTermin√©e = true
                      }
                    .onChange(of: item.leMessage) { message in // item.leMessage
                        Logger.interfaceUtilisateur.debug("√âvolution du message \(message) \(item.leMessage)")
                        saisieMessageTermin√©e = false
                        }
                
                    .foregroundColor(saisieMessageTermin√©e ? .accentColor : .gray)
//                        print("FLASH", message)
////                        groupeParent.integration.toggle()
////                        item.principal?.objectWillChange.send()
////                        groupeParent.objectWillChange.send()
////
////                        Array(item.lesGroupes).forEach {
//////                            $0.objectWillChange.send()
////                            $0.integration.toggle()
//                            }
//                        // Signaler aux groupes qui m'utilisent que quelque chose √† chang√©
//                        item.lesGroupes.forEach { $0.integration.toggle() }
//                        persistance.sauverContexte()
//                        }
                
                /// Validation locale du message
                Button(action: {
                    // Faire des choses plus pertinentes (cf les modes de validation individuelle ou globale)
                    // pourait √©viter un flux √† chaque nouvelle lettre saisie
                    Logger.interfaceUtilisateur.info("Message √† envoyer : '\(item.leMessage)'")
                    //FIXME: Danger !
                    item.principal?.objectWillChange.send()
                    saisieMessageTermin√©e = true
                    }) {
                        Label("OK", systemImage: "chevron.forward.circle.fill")
                        }
                
                Spacer()
                }
            
            
            Text("Signature : \(item.signature)")
            
            Form {
                TextField("Message", text: $item.leMessage) {
                    print("DIRECT")
                    saisieMessageTermin√©e = true
                } .foregroundColor(saisieMessageTermin√©e ? .accentColor : .gray)
                    .focused($champAvecFocus, equals: .message)
//                TextField("Signature", text: $signature)
//                    .focused($champAvecFocus, equals: .signature)
                }
//                .toolbar {
//                    ToolbarItem(placement: .keyboard) {
//                        Button("OK") {}
//                        }
//                    }
//                                 }
            
            /// D√©finir le lieu de l'item sur la carte, l'utilisateur peut d√©placer la r√©gion pour d√©signer une  autre position
            VueCarteEditionItem(item, uneR√©gion: $laR√©gion)
//                .onChange(of: item.coordonn√©es) { nouvelItem in
//                    Logger.interfaceUtilisateur.debug("üåê Coord Actu \(item.coordonn√©es.longitude) \(item.coordonn√©es.latitude),\t Nouv \(nouvelItem.longitude) \(nouvelItem.latitude) ")
//                   ///////////////////: item.centrerSur(laR√©gion)    non !!
//                    ////persistance.sauverContexte("Item", depuis:"ModifItem.CarteEditionItem") //"#function) // centraliser ?
//                    groupeParent.integration.toggle()
//                    }
            
                .onChange(of: item.r√©gion) { nouvelleR√©gion in
                    // √©volue si l'item est mis √† jour
                    Logger.interfaceUtilisateur.debug("üåêüåê carte item.r√©gion Actu \(item.r√©gion.center.longitude) \(item.r√©gion.center.latitude),\t Nouv \(nouvelleR√©gion.center.longitude) \(nouvelleR√©gion.center.latitude) ")
                    // item = f( nouvelleR√©gion )
                    item.centrerSur(nouvelleR√©gion)   // non !! ///////////////: 21 mars
                    ////persistance.sauverContexte("Item", depuis:"ModifItem.CarteEditionItem") //"#function) // centraliser ?
//                    groupeParent.integration.toggle()
                    // 5 avril
                    groupeParent.objectWillChange.send()
                    }
            
                .onChange(of: laR√©gion) { nouvelleR√©gion in
                    // √©volue en permance
                    Logger.interfaceUtilisateur.debug("üåêüåê carte laR√©gion Actu \(item.r√©gion.center.longitude) \(item.r√©gion.center.latitude),\t Nouv \(nouvelleR√©gion.center.longitude) \(nouvelleR√©gion.center.latitude) ")
                    }
            
                .aspectRatio(16/9, contentMode: .fit)

        }
        .isHidden(item.isDeleted || item.isFault ? true : false)
        .opacity(item.valide ? 1.0 : 0.1)
//        } // Nav
        
        
        
        
        .toolbar {
            
//            ToolbarItemGroup(placement: .keyboard) {
//                Button("OK") {
//                    champAvecFocus = nil
//                    print("DIRECT OK")
//                }
//                }
            
            ToolbarItemGroup(placement: .navigationBarLeading) {
                Button(action: {
                    Logger.interfaceUtilisateur.debug("Abandonner les modifs de l'Item (A ENRICHIR ?)")
                    //FIXME: Danger !
                    item.principal?.objectWillChange.send()
                    /// Dire √† ma vue m√®re que rien n'a chang√©
                    reponseAmaM√®re(false, item)
                }) {
                    VStack {
                        Icones.abandoner.imageSyst√©me
                        Text("Abandonner").font(.caption)
                        }
                  }.buttonStyle(.borderedProminent)

            }
            ToolbarItemGroup(placement: .navigationBarTrailing) {
//                Button(action: { feuilleAffectationGroupesPresent√©e.toggle() }) {
//                    VStack {
//                        Image(systemName: "tray.and.arrow.down.fill")
//                        Text("Rallier").font(.caption)
//                        }
//                    }
//                .buttonStyle(.borderless)
                
                Button(action: {
                    Logger.interfaceUtilisateur.debug("üåê Terminer (Valider ?) les modifs de l'Item (A ENRICHIR ?)")
                    Logger.interfaceUtilisateur.debug("üåê R√©gion \(laR√©gion.center.longitude)  \(laR√©gion.center.latitude) ")
                    Logger.interfaceUtilisateur.debug("üåê Item \(item.longitude)  \(item.latitude) ")

                    /// Validation globale, modifier la position de l'item avec le centre de la r√©gion actuellement affich√©e
                    item.centrerSur(laR√©gion)
                    // Rafraichir le Groupe
                    //FIXME: Danger !
                    item.principal?.objectWillChange.send()
                    reponseAmaM√®re(true, item)
                }) {
                    VStack {
                        Icones.valider.imageSyst√©me
                        Text("Terminer").font(.caption)
                        }
                  }.buttonStyle(.borderedProminent)
                
                Spacer()
                }
            }

        // Signaler aux groupes qui m'utilisent que quelque chose √† chang√©
        // et qu'il faut rafraichier l'√©cran en direct
        .onChange(of: item.valeur)    { _ in rafraichirLesGroupes() }
        .onChange(of: item.leMessage) { _ in rafraichirLesGroupes() }

        .onChange(of: item.titre)     { _ in rafraichirLesGroupes() }
        .onChange(of: item.coloris)   { _ in rafraichirLesGroupes() }

        .onChange(of: item.latitude)  { _ in
            Logger.interfaceUtilisateur.debug("üåê lat chang")
            rafraichirLesGroupes()
            }
        .onChange(of: item.longitude) { _ in
            Logger.interfaceUtilisateur.debug("üåê long chang")
            rafraichirLesGroupes()
            }
        
        .onChange(of: item.r√©gion) { _ in
            Logger.interfaceUtilisateur.debug("üåêüåê VueModif r√©gion chang")
//          rafraichirLesGroupes()
            }

        
        .onDisappear() {let _ = item.verifierCoh√©rence(depuis: #function)}
        
        .onAppear(perform: {
            Logger.interfaceUtilisateur.info("onAppear VueModifItem")
            let _ = item.verifierCoh√©rence(depuis: #function)
            })
        
    }


    
    
//MARK: -

    private func rafraichirLesGroupes() {
        Logger.interfaceUtilisateur.debug("‚ôªÔ∏è Rafraichir les groupes")
        //FIXME: le !  5 Avril
//        item.principal!.objectWillChange.send()
        item.lesGroupes.forEach {
//            $0.integration.toggle()
            // 5 Avril
            $0.objectWillChange.send()
        }
        }
    
    private func rallierGroupes(_ groupes: Set<Groupe>) {
        withAnimation {
            item.rallier(contexte:contexte, communaut√©: groupes )
            }
        }
    
}

