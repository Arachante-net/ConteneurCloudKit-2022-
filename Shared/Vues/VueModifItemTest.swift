//
//  ListItemView.swift
//  OrderedList
//
//  Created by SchwiftyUI on 9/2/19.
//  Copyright ¬© 2019 SchwiftyUI. All rights reserved.
//

import SwiftUI
import MapKit


/// Vue permettant d'√©diter les propri√©t√©es d'un Item
///     VueModifItem(item) { valeur in ... code √† √©xecuter afin de retourner des infos √† la vue appelante }
struct VueModifItemTest: View {
    
//    @ObservedObject var item: Item
//FIXME:  ou alors  @State var item:Item ou  Œû.item  (ViewModel)
//FIXME: c'est quoi un  @StateObject  ?
    
     
//    @StateObject private var Œû:ViewModel // = ViewModel(item)
    
    @State var item:Item
    @Binding var r√©gion : MKCoordinateRegion
    let achev√©e: (Bool) -> Void

    @State var feuilleAffectationGroupesPresent√©e:Bool = false


    @Environment(\.managedObjectContext) var contexte
    @Environment(\.presentationMode)     var modePresentation
    
    // Rejet de la pr√©sentation actuelle
    @Environment(\.dismiss) var cloreLaVueActuelle

    @EnvironmentObject private var persistance: ControleurPersistance
        
    @FocusState var champTexteActif: Bool
    

    
//    init(_ unItem: Item, r√©gion:MKCoordinateRegion, onSave: @escaping (Bool) -> Void ) {
////        _item = State(initialValue: unItem) /////:
////        item = unItem /////////:
////        Œû.item =  unItem
//        _Œû = StateObject(wrappedValue: ViewModel(unItem))
//        self.achev√©e = onSave
//        _r√©gion = Binding(projectedValue: unItem.r√©gion) //r√©gion
////        print("üåê Init de VueModifItem avec longitudes", Œû.item.longitude,unItem.longitude )
//        }


    var body: some View {
        NavigationView {
        VStack(alignment: .leading , spacing: 2) {
            VStack { // (alignment: .leading , spacing: 2)
                VStack { // (alignment: .leading , spacing: 2)
                    
                    TextField("Titre carte :",
                              text: $item.leTitre  //,
//                              format: .name(style: .medium)
                              )
                        .textFieldStyle(.roundedBorder)
                        .foregroundColor(.secondary)
                        .border(.secondary)
                        .focused($champTexteActif)
                        .submitLabel(.done)
                        .onSubmit {print("Submit")}
                        .toolbar {
                            ToolbarItemGroup(placement:   .keyboard) {
                                Button("Clic") { champTexteActif = false }
                                }
                            }

                    Stepper("\(item.valeur) points", value: $item.valeur, in: 0...10, step: 1)
                        .padding(.horizontal)
                    
                    Text("item.valeur : \(item.valeur) ") //  valeurLocale : \(valeurLocale)")

                    Toggle("Valide", isOn: $item.valide)
                    HStack {
                        ColorPicker("Couleur", selection: $item.coloris, supportsOpacity: false)
                        }
                        .frame(maxWidth: .infinity , maxHeight: 30)
                        .background(item.coloris)

                    }
                    .border(.secondary)
                
                }
                .padding(.horizontal)
            
            // D√©finir le lieu de l'item sur la carte
            VueCarteTest(item: item, laRegion: $r√©gion)
            
//            VueEditionCarte(
//                Œû.item,
//                sectionG√©ographique: Œû.r√©gionItem,
//                lesLieux:            Œû.locations, // la position
//                lieuEnCoursEdition:  Œû.leLieu√âdit√©
//            )
//                .onChange(of: Œû.locations) {newValue in
//                    let _ = print("üåê le tableau des locations √©volue")
//                    Œû.r√©gionItem.center.longitude = newValue.last?.longitude ?? 0
//                    Œû.r√©gionItem.center.latitude  = newValue.last?.latitude  ?? 0
//                    }
//                .onChange(of: Œû.leLieu√âdit√©) {newValue in
//                    let _ = print("üåê le lieu √©dit√© √©volue")
//                    }
            
            
        }
        .isHidden(item.isDeleted || item.isFault ? true : false)
        .opacity(item.valide ? 1.0 : 0.1)
        
        
        
        
        .sheet(isPresented: $feuilleAffectationGroupesPresent√©e) {
            Text("Rallier les groupes")
            
            VueAffectationItemGroupe(lesGroupesChoisis: item.lesGroupes ) {
                rallierGroupes($0)
                feuilleAffectationGroupesPresent√©e = false
                }
                .environment(\.managedObjectContext, persistance.conteneur.viewContext)
            }
        
        
        
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                Button(action: { feuilleAffectationGroupesPresent√©e.toggle() }) {
                    VStack {
                        Image(systemName: "tray.and.arrow.down.fill")
                        Text("Rallier").font(.caption)
                        }
                    }
//                .buttonStyle(.borderless)
                Spacer()
                Button(role: .cancel, action: {
                    print("BOF")
                    cloreLaVueActuelle()
                } ) {
                    VStack {
                        Image(systemName: "backward")
                        Text("Annuler").font(.caption)
                        }
                }
                
                Button(action: {
                    item.longitude = r√©gion.center.longitude
                    item.latitude  = r√©gion.center.latitude

                   ////////////:
//                    if !Œû.locations.isEmpty {
//                        Œû.item.longitude = (Œû.locations.last?.coordonn√©es.longitude)! //?? 0
//                        Œû.item.latitude  = (Œû.locations.last?.coordonn√©es.latitude)! // ?? 0
//                        Œû.r√©gionItem.center.latitude = Œû.locations.last?.coordonn√©es.latitude ?? 0
//                        Œû.r√©gionItem.center.longitude = Œû.locations.last?.coordonn√©es.longitude ?? 0
//                        }
                     
                        persistance.sauverContexte("Item")
                    
                        // executer la closure fournie √† cette Vue (VueModifItem) en parametre d'entr√©e
                        // par la vue appelante.
                        achev√©e(true)
                        }
                    ) { Text("VALIDER") }
                    .buttonStyle(.borderedProminent)
                }
            }

        
        
        
        
        
        .onAppear(perform: {
            // charger un Item en m√©moire
//            titre     = item.titre ?? "..."
//            valeurLocale    = Int(item.valeur)
//            ordre     = Int(item.ordre )
//            latitude  = item.latitude
//            longitude = item.longitude
//            instant   = item.horodatage //timestamp!
//            couleur   = item.coloris
//            valide    = item.valide
            })
        
    }}




    private func rallierGroupes(_ groupes: Set<Groupe>) {
        withAnimation {
            item.rallier(contexte:contexte, communaut√©: groupes )
            }
        persistance.sauverContexte("Groupe")
        }
    
}

