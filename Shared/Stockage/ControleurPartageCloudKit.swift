
import SwiftUI
import CoreData
import CloudKit



/// Pr√©senter des √©crans pour ajouter et supprimer des participants au partage CloudKit
struct VuePartageCloudKit: UIViewControllerRepresentable {
    
// VuePartageCloudKit est conforme au protocole UIViewControllerRepresentable
// et enveloppe le UICloudSharingController de UIKit, afin de l'utiliser depuis SwiftUI.

  let partage:     CKShare     // Un enregistrement qui g√®re une collection de documents partag√©s.
  let conteneurCK: CKContainer // le conteneur Cloud Kit qui contient les bases de donn√©es priv√©es, partag√©es ou publiques.
  
  let itemAPartager: Item // l'objet (l'entit√©) √† partager (qui contient les donn√©es √† partager)
  let coordinateur : D√©l√©gu√©DuControleurDePartageCharg√©DeLaCoordination // d√©fini dans VueDetailItem


    
    
//    mutating func makeCoordinator() -> CoordinateurDePartageCloudKit {
//      coordinateur = CoordinateurDePartageCloudKit(item: itemAPartager)
//      let _ = print("„ÄΩÔ∏è„ÄΩÔ∏è make Coordinateur", coordinateur)
//      return coordinateur
//    }

  /// Fournir l'√©cran permettant √† l'utilisateur  d'inviter, octroyer des droits, arr√™ter de participer ...
  func makeUIViewController(context: Context) -> UICloudSharingController { // UIViewControllerRepresentableContext<Self>
    let _ = print("„ÄΩÔ∏è„ÄΩÔ∏è Construction du controlleur 'UI View Controller'")
    //////////////////  partage[CKShare.SystemFieldKey.title] = "‚èπ„ÄΩÔ∏è„ÄΩÔ∏è\(itemAPartager.titre) makeUIViewController" // Affich√© lors du partage
    
      /// D√©finir le controleur de partage CK et lui associer son d√©l√©gu√© √† la coordination (d√©fini dans  VueDetailItem)
      let contr√¥leurDePartage = UICloudSharingController(share: partage, container: conteneurCK)
//        controller.toolbarItems = [] //DEVIL
        contr√¥leurDePartage.modalPresentationStyle = .popover  //FIXME: .formSheet cf. plantage iPad
      let _ = print("„ÄΩÔ∏è„ÄΩÔ∏è D√©l√©gation au coordinateur", coordinateur, "du contr√¥le de partage.")
        contr√¥leurDePartage.delegate = coordinateur //makeCoordinator()  //  CoordinateurDePartageCloudKit(item: itemAPartager) //context.coordinator // UICloudSharingControllerDelegate? //DEVIL
      contr√¥leurDePartage.availablePermissions = [.allowPrivate, .allowReadWrite] //.allowReadOnly] // allowReadWrite   //DEVIL
    let _ = print("„ÄΩÔ∏è„ÄΩÔ∏è coordinateur d√©l√©gu√© du controleur", contr√¥leurDePartage.delegate) //context.coordinator)
    return contr√¥leurDePartage
    } // makeUIViewController

    
  func updateUIViewController(_ uiViewController: UICloudSharingController, context: Context) {
      let _ = print("„ÄΩÔ∏è M√†J fen√™tre de partage (appel de updateUIViewController)")
      }
    
  } //VuePartageCloudKit






/// D√©finition du d√©l√©gu√© charg√© de
/// - fournir des informations suppl√©mentaires et
/// - recevoir des notifications
/// (contr√¥leur de partage CloudKit)
final class D√©l√©gu√©DuControleurDePartageCharg√©DeLaCoordination: NSObject, UICloudSharingControllerDelegate {
    @EnvironmentObject private var persistance : ControleurPersistance
    
    let item: Item
    
    init(item: Item) {
        print("„ÄΩÔ∏è Initialisation du coordinateur/d√©l√©gu√© du partage (CloudSharingCoordinator)", "pour",  item.titre ?? "...")
        self.item = item }

    
  /// Fournir un titre par defaut √† la fen√™tre de r√©alisation  du partage
  func itemTitle(for csc: UICloudSharingController) -> String? {
      print("„ÄΩÔ∏è„ÄΩÔ∏è„ÄΩÔ∏è ‚ùì D√©finition du titre du partage (", item.titre ?? "...", ")")
      return "‚úÖ\(String(describing: item.titre) ) d√©l√©gu√©" }

    
  /// Fournir la vue miniature (par d√©faut ?) de l'invitation de partage.
    // itemThumbnailData(for:) n'est appel√© que lors de la cr√©ation d'un nouveau partage.
    // Pour un partage existant, l'image miniature est r√©cup√©r√©e √† partir du partage √† l'aide de la cl√© CKShare_SystemFieldKey_imageData.
  func itemThumbnailData(for: UICloudSharingController) -> Data? {
      print("„ÄΩÔ∏è„ÄΩÔ∏è„ÄΩÔ∏è ‚ùì cr√©ation de la vue miniature de l'invitation de partage")
      return Donn√©esMiniature()     // .pngRepresentationData
      }
    
  func Donn√©esMiniature() -> Data? {
        let image = UIImage(named: "Partage")
        let donn√©esImage = image?.pngData()
        print("„ÄΩÔ∏è Cr√©ation Miniature largeur :", image?.size.width ?? 0, "x hauteur :", image?.size.height ?? 0,  ", donn√©es:" , donn√©esImage?.count ?? 0, "octets")//   isEmpty ?.debugDescription)
        return donn√©esImage     // .pngRepresentationData
        }

//   // Uniform Type Identifier (UTI) d'un item.
//  func itemType(for: UICloudSharingController) -> String? {
//      // return kUTTypePNG as String
//      nil
//      }
    
  func cloudSharingController(_ csc: UICloudSharingController, failedToSaveShareWithError error: Error) {
      // Indique au d√©l√©gu√© que le contr√¥leur de partage CloudKit n'a pas r√©ussi √† enregistrer l'enregistrement de partage.
      print("„ÄΩÔ∏è„ÄΩÔ∏è„ÄΩÔ∏è ‚ùì Erreur √† l'enregistrement du partage : \(error)")
      }

  func cloudSharingControllerDidSaveShare(_ csc: UICloudSharingController) {
      // Indique au d√©l√©gu√© que le contr√¥leur de partage CloudKit a enregistr√© l'enregistrement de partage.
      print("„ÄΩÔ∏è„ÄΩÔ∏è„ÄΩÔ∏è Le contr√¥leur de partage iCloud a bien enregistr√© le partage (cloudSharingControllerDidSaveShare)")
      }

    
    func cloudSharingControllerDidStopSharing(_ csc: UICloudSharingController) {
        // Indique au d√©l√©gu√© que l'utilisateur a cess√© de partager l'enregistrement.
      print("„ÄΩÔ∏è„ÄΩÔ∏è„ÄΩÔ∏è ‚ùì Le contr√¥leur de partage iCloud a arr√™t√© de partager  (cloudSharingControllerDidStopSharing)")
        if !persistance.jeSuisPropri√©taire(objet: item) {
            persistance.supprimerObjets([item])
            }
        
//        if !stack.isOwner(object: item) {
///////////////////        stack.delete(item)
//        stack.supprimerObjets([item])
//      }
        
        
    }
    
    func tester() { print("„ÄΩÔ∏è") } //, self, "Item :", item.leTitre) }
    
    
}// CloudSharingCoordinator


private func fournirUnPartageCK(_ item: Item, conteneur: NSPersistentCloudKitContainer)  async -> CKShare? {
  var _partage:CKShare? //= nil
    
  do {
      // Associer un item √† un (nouveau ou existant) partage
      print("„ÄΩÔ∏è üîÜ Cr√©ation d'un partage pour", item.leTitre)
      let (_, _partageTmp, _) = try await conteneur.share([item], to: nil)//    stack.persistentContainer.share([item], to: nil)
      let nbParticipants = _partageTmp.participants.count
      _partageTmp[CKShare.SystemFieldKey.title] = "\(nbParticipants) Participer √† l'√©v√©nement\n\"\(item.titre ?? "...")\"\n(Cr√©ation de la collaboration)"
         let image = UIImage(named: "CreationPartage")
         let donn√©esImage = image?.pngData()
      _partageTmp[CKShare.SystemFieldKey.thumbnailImageData] = donn√©esImage
//      if coordinateurPartage.Donn√©esMiniature() == donn√©esImage {
//          print("„ÄΩÔ∏è„ÄΩÔ∏è„ÄΩÔ∏è„ÄΩÔ∏è„ÄΩÔ∏è„ÄΩÔ∏è M√™mes donn√©es ! ")
//          }
      // Type UTI qui decrit le contenu partag√©
//      _partageTmp[CKShare.SystemFieldKey.shareType] = "com.arachante.nimbus.item"
      print("„ÄΩÔ∏è...", nbParticipants, "participants")
      _partageTmp[CKShare.SystemFieldKey.shareType] = "com.arachante.nimbus.item.fournir"
      _partageTmp.setValue("FOURNIR", forKey: "NIMBUS_PARTAGE_ORIGINE")
      _partageTmp.setValue(item.id?.uuidString,   forKey: "NIMBUS_PARTAGE_ITEM_ID")

      _partage = _partageTmp
      }
  catch { print("‚ùóÔ∏èImpossible de cr√©er un partage CloudKit") }
  return _partage

  }
