//Arachante
// michel  le 02/11/2021
// pour le projet  ConteneurCloudKit
// Swift  5.0  sur macOS  12.0
//
//  2022 pour Item Seul
//

import CoreData
import CloudKit
import UIKit

//import Combine
import os.log



/// Fourni :
/// - un conteneur qui encapsule la pile Core Data et qui met en miroir les magasins persistants locaux s√©lectionn√©s dans une base de donn√©es distante CloudKit.
/// - ainsi qu'une gestion de l'historique des transactions.
/// - et la configuration de la couche CloudKit correspondante
///
/// - Acc√©s au Contexte CoreData (bloc notes des operations)
/// - Coordinateur des magasins, il stocke et r√©cup√®re les donn√©es depuis la base (magasin), les convertis en objet pour les passer au contexte en v√©rifiant la conformit√© au mod√®le.
/// - Acc√©s au mod√®le (le sch√©ma d'organisation des donn√©es) entit√©s, attributs et relations.
///
open class ControleurPersistance : ObservableObject {
    @Published var appError: ErrorType? = nil
    // Singleton (mais est-ce utile si on utilise comme ici un ObservableObject ?? )
    static let shared = ControleurPersistance()


     public let conteneur: NSPersistentCloudKitContainer
    
    let historien : Historien
    
    // Par d√©faut, le nom est utilis√© pour
    // ¬∞ nommer le magasin persistant ... üåö
    // ¬∞ retrouver le nom du model NSManagedObjectModel √† utiliser avec le conteneur NSPersistentContainer.
    let nomConteneur = "ConteneurCloudKit"
    
    static let auteurTransactions = UserDefaults.standard.string(forKey: "UID") //"JTK"
    static let nomContexte        = "Enterprise"

    let  l = Logger.persistance //subsystem: Identificateur du bundle, category: "persistance"

    var magasinPersistantPartag√©: NSPersistentStore {
      guard let sharedStore = _magasinPersistantPartag√© else {
        fatalError("Magasin partag√© non configur√©")
        }
      return sharedStore
      }
    
    var magasinPersistantPriv√©: NSPersistentStore {
      guard let privateStore = _magasinPersistantPriv√© else {
        fatalError("Magasin priv√© non configur√©")
        }
      return privateStore
      }
    
    var conteneurCK: CKContainer {
      let storeDescription = conteneur.persistentStoreDescriptions.first
      guard let identifier = storeDescription?.cloudKitContainerOptions?.containerIdentifier else {
        fatalError("‚ùóÔ∏èImpossible d'obtenir l'identifiant du conteneur CloudKit") //Unable to get container identifier")
      }
      print("„ÄΩÔ∏è lecture du conteneur CK,   ID:", identifier)
      return CKContainer(identifier: identifier)
    }
    
    // Nuage : A ETUDIER
    public  var leStatut:String=""
    public  var statut:String=""
    
    public  var enregistrement=""
    public  var zone=""
    public  var port√©e=""
    public  var abonnement=""
    public  var permissions=""
    public  var proprietaire=""
    public  var prenom=""
    public  var nom=""
    public  var aUnCompte=false
    // Fin Nuage √† voir


    var contexte: NSManagedObjectContext { conteneur.viewContext }
    
    
    private var _magasinPersistantPriv√©:   NSPersistentStore?
    private var _magasinPersistantPartag√©: NSPersistentStore?
    
    
    
    public init(inMemory: Bool = false) {
        l.debug("En m√©moire \(inMemory.voyant)")
        l.error("\nInitialisation (ControleurPersistance) d'un conteneur.\n")
        conteneur = NSPersistentCloudKitContainer(name: nomConteneur)
        
        // Magasin entierement en m√©moire
        if inMemory {
            // utilis√© pour les tests et les previsualisations SwiftUI  (et peut-√™tre d'autres cas)
            conteneur.persistentStoreDescriptions.first!.url = URL(fileURLWithPath: "/dev/null")
            }
        
        // Autoriser le suivi de l'historique
        historien = Historien(conteneur: conteneur)
        
        
        //MARK: - Magasinier -
        //MARK:   Description

        guard let descriptionMagasinPriv√© = conteneur.persistentStoreDescriptions.first else {
            appError = ErrorType( .erreurInterne)
            fatalError("PAS TROUV√â DE DESCRIPTION")
            }
        
        
        // üü£ Demander une notification pour chaque √©criture dans le magasin (y compris celles d'autres processus)
        descriptionMagasinPriv√©.setOption(true as NSObject, forKey: NSPersistentStoreRemoteChangeNotificationPostOptionKey)
        
        // üî¥ Demander les notifications de modifications distantes (en double avec au-dessus)
//        let remoteChangeKey = "NSPersistentStoreRemoteChangeNotificationOptionKey"
//      description.setOption(true as NSNumber, forKey: "NSPersistentStoreRemoteChangeNotificationOptionKey")
        
        // Activer le suivi de l'historique persistant.
        // Conserver l'historique des transactions avec le magasin
        descriptionMagasinPriv√©.setOption(true as NSNumber, forKey: NSPersistentHistoryTrackingKey)
        
        
        //MARK: Ajouter un magasin partag√©
        // au conteneur, avec les m√™mes options que le magasin priv√© (sauf la port√©e)
        let urlsMagasins = descriptionMagasinPriv√©.url!.deletingLastPathComponent()
        let urlMagasinPartag√© = urlsMagasins.appendingPathComponent("partage.sqlite")
        let descriptionMagasinPartag√© = descriptionMagasinPriv√©.copy() as! NSPersistentStoreDescription
        descriptionMagasinPartag√©.url = urlMagasinPartag√©
        //            descriptionMagasinPartag√©.configuration = "partag√©e"

        let identifiantConteneurPartag√© = descriptionMagasinPartag√©.cloudKitContainerOptions!.containerIdentifier
        let optionsMagasinPartag√© = NSPersistentCloudKitContainerOptions(containerIdentifier: identifiantConteneurPartag√©)
        optionsMagasinPartag√©.databaseScope = .shared
        descriptionMagasinPartag√©.cloudKitContainerOptions = optionsMagasinPartag√©
        conteneur.persistentStoreDescriptions.append(descriptionMagasinPartag√©)

        
        //MARK: - Stokage persistant m√©moriser chacun des magasins r√©ferenc√©s -
        // Demander au conteneur de charger le(s) magasin(s) persistant(s)
        // (et de terminer la cr√©ation de la pile CoreData)
        
        conteneur.loadPersistentStores { descriptionDuMagasin, erreur in
            // Une fois pour chacun des magasins
            if let error = erreur as NSError? {
                //TODO: G√©rer l'erreur pour une utilisation en production
                // fatalError() force l'application √† planter

                /*
                 Raisons possibles d'une erreur¬†:
                 * Le r√©pertoire parent n'existe pas, ne peut pas √™tre cr√©√© ou interdit l'√©criture.
                 * Le magasin persistant n'est pas accessible, en raison des autorisations ou de la protection des donn√©es lorsque l'appareil est verrouill√©.
                 * L'appareil manque d'espace.
                 * Le magasin n'a pas pu √™tre migr√© vers la version actuelle du mod√®le.
                 
                 V√©rifier le message d'erreur pour d√©terminer quel √©tait le probl√®me r√©el.
                */
                self.appError = ErrorType( .trucQuiVaPas(num: 666))
                fatalError("ERREUR AU CHARGEMENT DU MAGASIN \(error), \(error.userInfo)")
                } // erreur
            
            let identifiantConteneur = descriptionDuMagasin.cloudKitContainerOptions!.containerIdentifier
            self.l.info("Identifiant du conteneur \(identifiantConteneur)")
            let optionsConteneurCloudKit   = NSPersistentCloudKitContainerOptions(containerIdentifier: identifiantConteneur)
// CF https://www.raywenderlich.com/29934862-sharing-core-data-with-cloudkit-in-swiftui
            if let optionsConteneurCloudKit_2 = descriptionDuMagasin.cloudKitContainerOptions {

                guard let urlMagasinCharg√© = descriptionDuMagasin.url else { return }
                    //         let urlsMagasins = descriptionMagasinPriv√©.url!.deletingLastPathComponent()

                self.l.info("Identifiant du conteneur PORTEE \(optionsConteneurCloudKit_2.databaseScope.rawValue)")
                if optionsConteneurCloudKit_2.databaseScope == .private {
                    let magasinPriv√© = self.conteneur.persistentStoreCoordinator.persistentStore(for: urlMagasinCharg√©)
                  //self.
                    descriptionMagasinPriv√©.configuration = "priv√©e"
                    self._magasinPersistantPriv√© = magasinPriv√©
                  }
                else if optionsConteneurCloudKit_2.databaseScope == .shared {
                    let magasinPartag√© = self.conteneur.persistentStoreCoordinator.persistentStore(for: urlMagasinCharg√©)
        ////////////////          self.
                    descriptionMagasinPartag√©.configuration = "partag√©e"
                    self._magasinPersistantPartag√© = magasinPartag√©
                    print("„ÄΩÔ∏è descriptionMagasinPartag√©", descriptionMagasinPartag√©.configuration)
                  }
                self.l.info("Identifiant du conteneur URL \(urlMagasinCharg√©)")
                } // options conteneur CloudKit

            
            self.l.info("\nOptions: \(descriptionDuMagasin.configuration ?? "...") \(optionsConteneurCloudKit.databaseScope.rawValue)")

            
        } // Fin du loadPersistentStores

        
        
        
        //MARK: - Contexte -
        // Sugger√© dans les forums et autres discussions du WWW
                
        // √âpingler le viewContext au jeton de g√©n√©ration actuelle
        // et le configurer pour qu'il se rafraichisse avec les modifications locales.
        conteneur.viewContext.automaticallyMergesChangesFromParent = true
        
//        // Pour plus de "stabilit√©" ?
//        do {
//            // Indiquer quelle g√©n√©ration du magasin persistant est accessible.
//            // Lorsqu'un contexte d'objet g√©r√© est √©pingl√© √† une g√©n√©ration sp√©cifique des donn√©es de l'application,
//            // un jeton de g√©n√©ration de requ√™te sera associ√© √† ce contexte.
//            // le contexte doit utiliser la g√©n√©ration courante
//            try conteneur.viewContext.setQueryGenerationFrom(.current)
//        } catch {
//            fatalError("###\(#function): IMPOSSIBLE D'EPINGLER LE viewContext A LA GENERATION current :\(error)")
//        }
        
        // Pour plus de "stabilit√©" ?
        if !inMemory {
          do {
              // Indiquer quelle g√©n√©ration du magasin persistant est accessible.
              // Lorsqu'un contexte d'objet g√©r√© est √©pingl√© √† une g√©n√©ration sp√©cifique des donn√©es de l'application,
              // un jeton de g√©n√©ration de requ√™te sera associ√© √† ce contexte.
              // le contexte doit utiliser la g√©n√©ration courante
            try conteneur.viewContext.setQueryGenerationFrom(.current)
          } catch {
            let nsError = error as NSError
              l.error("IMPOSSIBLE D'EPINGLER LE viewContext A LA GENERATION current : \(nsError)")
          }
        }
        
        // Fusionner, lors d'un enregistrement, les conflits des propri√©t√©s individuelles, entre
        // la version de l'objet du magasin persistant
        // et celle-S actuellement en m√©moire.
        // ICI : Les modifications externes l'emportant sur les modifications en m√©moire.
        //RQ: les conflits peuvent apparaitrent a deux endroits :
        //Entre le contexte d'objet g√©r√©
        //   et le cache du coordinateur de magasin persistant.
        //Entre le cache du coordinateur de magasin persistant
        //   et le magasin externe (fichier, base de donn√©es, etc.).
        conteneur.viewContext.mergePolicy = NSMergeByPropertyStoreTrumpMergePolicy
        //TODO: different de ?
//        conteneur.viewContext.mergePolicy = NSMergePolicyType.mergeByPropertyObjectTrumpMergePolicyType


        // Fusionner les modifications dans le `viewContext`,
        // permettant ainsi la M√†J automatique de l'interface utilisateur.
        conteneur.viewContext.automaticallyMergesChangesFromParent = true
        
        conteneur.viewContext.transactionAuthor = ControleurPersistance.auteurTransactions
        conteneur.viewContext.name              = ControleurPersistance.nomContexte

        
// mardi 10 mai
//        let magasinPartag√© = conteneur.persistentStoreCoordinator.persistentStore(for: urlMagasinPartag√©)

        
        //MARK: - publier le Schema Une fois seulement
//        publierSchema()
        
        
        
        
        
        
        
        
        
        //MARK: Suivi de l'historique -
        demanderNotifications_NSPersistentStoreRemoteChange()
        
        //  chargerHistorique()
        historien.consulterMaPositionDansHistorique()
        
        
        //MARK: - Les configurations du mod√®le
        conteneur.managedObjectModel.configurations.forEach() {configuration in
            print("CONF Configuration :", configuration)
            }
        
        let ent = conteneur.managedObjectModel.entities(forConfigurationName: "TestConfig")
        
        print("CONF Premi√®re entit√© de la configuration TestConfig :", ent?.first?.name)
            
        let confsGroupe = Groupe.entity().managedObjectModel.configurations
        print("CONF Derni√®re configuration (/", confsGroupe.count , ") de Groupe :", confsGroupe.last ?? "...")
        
        //MARK: - -------
        statuerConteneurCK()


///  Decommenter  pour charger le schema vers ClouKitn
//        do {
//            try conteneur.initializeCloudKitSchema(options: NSPersistentCloudKitContainerSchemaInitializationOptions())
//        } catch {
//            print(error)
//        }
// // Ou alors :
//        publierSchema()

        
    } // Fin init ControleurPersistance

} // Fin Controleur Persistance






//MARK: - Historien -
extension ControleurPersistance {
    //MARK: √† mettre dans historien ?
    /// recevoir (GET) des notifications
    func demanderNotifications_NSPersistentStoreRemoteChange() {
        l.info("\nüü£üü£üü£ S'abonner aux notifications.\n")
        
            let r√©p = 42
            l.debug("Fonc√© Debug")
            l.info("Clair Info")
            l.notice("?? Notice")
            l.error("Jaune Erreur")
            l.fault("Rouge La r√©ponse est \(r√©p)")
        
        l.info("Auteur \(ControleurPersistance.auteurTransactions ?? "")")   // Redacted!
        l.info("Conteneur \(self.nomConteneur, privacy: .private)")  // masqu√©
        
        // n'utiliser qu'une seule des deux m√©thodes
        
        // --- Methode "selector" ---
        // param _ observateur : l'objet √† notifier.
        // objet : l'exp√©diteur des notifications √† l'observateur.
        // param object √† nil ==> on recoit les notifs de tous, sinon seulement celles de l'exp√©diteur sp√©cifi√©.
        // param selector: #selector(self.recevoirNotification(notification:))
        // Un 's√©lecteur' qui sp√©cifie le message que le destinataire doit envoyer √† l'observateur pour le notifier.
        // La m√©thode sp√©cifi√©e par selector doit avoir un seul et unique argument (une instance de NSNotification).
        
        
//        // üîπ
//        NotificationCenter.default
//            .addObserver(
//                historien,
//                selector: #selector(historien.traiterLesEvolutionsDuStockageDistant),
//                name: .NSPersistentStoreRemoteChange,
//                object: conteneur.persistentStoreCoordinator
//                )
        
        // üî¥ https://developer.apple.com/documentation/coredata/consuming_relevant_store_changes
//        NotificationCenter.default
//            .addObserver(
//                historien,
//                selector: #selector(historien.traiterLesEvolutionsDuStockageDistant_DEBUG),
//                name: NSNotification.Name( rawValue: "NSPersistentStoreRemoteChangeNotification"),
//                object: conteneur.persistentStoreCoordinator
//                )
        
        
        // üü£ --- Methode "combine" ---
        NotificationCenter.default
          // diffuseur des notifications.
          .publisher(for: .NSPersistentStoreRemoteChange)
          // recepteur des notifications
          .sink { self.historien.traiterLesDernieresEvolutionsDuStockageDistant($0) } // self
          // Inclure ce recepteur aux abonnements de l'historien
          .store(in: &historien.abonnements)
        
        }
    
    // ERREUR : Vous avez enregistr√© un observateur de notification sur un objet qui a √©t√© lib√©r√©
    // et qui n'a pas supprim√© l'observateur.
    // Ainsi, lorsqu'il essaie d'appeler le s√©lecteur, il plante.

    
    func d√©sabonner() {
        // Supprimer l'observateur,
        // afin d'√©viter un blocage, lorsque le syt√®me essaie d'appeler le recepteur
        // alors que l'objet a √©t√© lib√©r√©
        NotificationCenter.default.removeObserver(
            historien,
//            name: NSNotification.Name( rawValue: "NSPersistentStoreRemoteChangeNotification"),
            name: .NSPersistentStoreRemoteChange,
            object: conteneur.persistentStoreCoordinator)
        }
    } // fin extension Historien


//MARK: - Manipulation du contexte -
extension ControleurPersistance {
//TODO: A mettre dans une extension ?
func retourArriereContexte() {
    l.debug("üí∞ retour arriere contexte (\(self.conteneur.viewContext.hasChanges ? "il y avait des √©volutions" : "rien a sauver")), \t \(self.conteneur.viewContext.updatedObjects.count) √©volutions, \(self.conteneur.viewContext.insertedObjects.count) insertions, \(self.conteneur.viewContext.deletedObjects.count) suppressions.")
    conteneur.viewContext.rollback()
    // This method does not refetch data from the persistent store or stores.
    }
    
func sauverContexte( _ nom:String="ContexteParDefaut"  , auteur:String = UserDefaults.standard.string(forKey: "UID")  ?? "AuteurParDefaut", depuis:String="") {
  // Y-a bien eu des changements
  guard conteneur.viewContext.hasChanges else { return }

  do {
      l.debug("üí∞üí∞‚öôÔ∏è Sauvegarde [\(self.conteneur.viewContext.registeredObjects.count) enregistrements], du contexte (depuis \(depuis), nom \(nom), auteur, \(auteur)) \(self.conteneur.viewContext.hasChanges ? "‚òëÔ∏è" : "üü∞"), \t \(self.conteneur.viewContext.updatedObjects.count) √©volutions, \(self.conteneur.viewContext.insertedObjects.count) insertions, \(self.conteneur.viewContext.deletedObjects.count) suppressions.")
//          let lesEnregistrements = self.conteneur.viewContext.registeredObjects.compactMap(\.entity.name )
      l.info("üí∞- \( self.conteneur.viewContext.registeredObjects.compactMap(\.entity.name) )")



      self.conteneur.viewContext.updatedObjects.forEach() {
          switch $0.entity.name {
              case "Item" :
                  let O = $0 as! Item
                  l.debug("üí∞ -> [Item] : \(O.leTitre) V:\(O.valeur), M:\(O.leMessage), long:\(O.longitude) lat:\(O.latitude)")
                  /// Si Item √©volue mettre √† jour son horodatage
                  O.timestamp = Date()
              case "Groupe" :
                  let O = $0 as! Groupe
                  l.debug("üí∞ -> [Groupe] \(O.leNom) ")
              default: l.debug("üí∞ -> [[\($0.entity.debugDescription)]] ") //"   .entity.name)") //"break
                  }
              } // foreach
      
        conteneur.viewContext.transactionAuthor = auteur // + "Persistance"
        conteneur.viewContext.name = nom
    try conteneur.viewContext.save()
//            conteneur.viewContext.transactionAuthor = nil
    }
  catch {
      //FIXME: Peut mieux faire (cf. mod√®le Apple)
      //
      
      //  fatalError() causes the application to generate a crash log and terminate.
      // You should not use this function in a shipping application, although it may be useful during development.
   
    let nsError = error as NSError
    appError = ErrorType(.trucQuiVaPas(num: 666))
      l.error("Erreur lors de l'enregistrement de \(nsError)")
    }
  }



func supprimerObjets(_ objects: [NSManagedObject], mode:Suppression = .d√©faut) {
    if mode == .simulation {l.info ("üîòüîò Simulation de suppression de \(objects)")}
    else {
        conteneur.viewContext.perform { [context = conteneur.viewContext] in
            objects.forEach {objet in
                self.l.info("üîòüîò‚öôÔ∏è Supprimer objet \(objet.entity) \(objet.debugDescription)")
//              objet.prepareForDeletion() // automatique
                context.delete(objet)
            }
            
//            objects.forEach(context.delete)


            self.sauverContexte(depuis:#function)
            }
        }
    }

} // fin extension contexte
    



//MARK: - Fonctions de Partage CloudKit -
//MARK: Aides au Partage : participant permission, methodes and propriet√©s ...
extension ControleurPersistance {
    /*
        Cette extension contient le code relatif au partage CK. La m√©thode v√©rifie le persistentStore du NSManagedObjectID qui a √©t√© transmis pour voir s'il s'agit du sharedPersistentStore.
        Si c'est le cas, alors cet objet est d√©j√† partag√©.
        Sinon, on utilise fetchShares(matching:) pour voir s'il existe des objets correspondant √† l'objectID en question.
        Si on a une correspondance, alors c'est que l'objet est d√©j√† partag√©.
        */

/// l'objet est-il partag√© via CloudKit ?
func estPartag√©CK(objet: NSManagedObject) -> Bool {
//    \Groupe.leNom
//    \Item.leTitre d√©signation
//    let TG:Groupe? = objet.self as? Groupe //as Groupe
//    let TI = objet.self as? Item
//    let TT = type(of: objet)
    guard type(of: objet) == Item.self else {return false}
    print("„ÄΩÔ∏è„ÄΩÔ∏èüóØ L'item \( (objet as! Item).leTitre) est-il partag√© ? ")
    return estPartag√©(idObjet: objet.objectID)
    }

    /// l'objet est-il partag√© via CloudKit ?
private func estPartag√©(idObjet: NSManagedObjectID) -> Bool {
    print("„ÄΩÔ∏è üóØ l'objet (id \(idObjet.uriRepresentation()) ) est-il partag√© ?")
    var _estPartag√© = false
    // V√©rifier si le magasin persistant de l'Objet transmis est bien le magasinPersistant de l'appli
    if let magasinPersistant = idObjet.persistentStore {
        print("üóØ Le magasin persistant de l'item √† partager :", magasinPersistant.description , "(", idObjet.persistentStore?.description ?? "..." ,")")
        
        if magasinPersistant == _magasinPersistantPartag√© {//}  magasinPartag√© {
            // l'objet est d√©j√† partag√©
            print("üóØ Le magasin persistant partag√© d√©ja existant :", _magasinPersistantPartag√©?.description ?? "...", "est identique a celui de l'item √† partager")  /// // a creuser
                                                                                                                         ///
            _estPartag√© = true
            }
        else {
            // Sinon, utiliser fetchShares(matching:) afin de verifier si nous avons des objets partag√©s correspondant √† l'id transmis
            print("üóØ‚ùóÔ∏èLe magasin persistant partag√© d√©ja existant :", _magasinPersistantPartag√©?.description ?? "..." , "n'est pas celui de l'item √† partager" , magasinPersistant.description)  ///// a creuser
            let _conteneur = conteneur
            
            //NSPersistentCloudKitContainer(name: nomConteneur)

//            conteneur //persistentContainer  ///// DIRECT ??
            print("„ÄΩÔ∏èüóØ Cherchons dans le conteneur CK :", _conteneur.name)
            do {
                // les enregistrements de partage CloudKit
                let partages = try _conteneur.fetchShares(matching: [idObjet])
                print("„ÄΩÔ∏èüóØ Le conteneur", _conteneur.name, "contient \(partages.count) partages.")
                if partages.first != nil {
                    // S'il y-a une correspondance, c'est que l'objet transmis est d√©j√† partag√©.
//                    let v = idObjet.value(forKey: "coin")
//                    let _partage = partages.first
//                    let _participation = _partage!.value.participants.count
//                    print("„ÄΩÔ∏èüóØ Le premier partage existe son proprietaire est :", _partage!.value.owner.userIdentity.nameComponents ?? "...", " participation de", _participation)
                    partages.forEach() {_p in
                        let _pv = _p.value // CKShare
                        let id = _pv.recordID
                        let k = _pv.allKeys()

                        print("„ÄΩÔ∏èüóØ Partage , proprietaire :", _pv.owner.userIdentity.nameComponents ?? "...",
                              " participation de", _pv.participants.count,
//                              " " , cloudKitShareMetadata.share.value(forKey: "NIMBUS_PARTAGE_GROUPE_OBJECTIF") ) //
                              " id :"     , _pv.recordID ,
//                              " id_ :"    , _pv.recordID.value(forKey: "NIMBUS_PARTAGE_GROUPE_NOM") ?? "..." ,
                              " NOM_ :"   , _pv.value(forKey: "NIMBUS_PARTAGE_GROUPE_NOM") ?? "..." ,
                              " clefs_ :" , _pv.allKeys() ) // ["cloudkit.title", ...]
                        }
                    _estPartag√© = true
                }
                }
            catch {
            print("‚ùóÔ∏èImpossible de trouver un partage de \(idObjet): \(error)")
            }
        }
    }
    print("„ÄΩÔ∏è„ÄΩÔ∏èüóØ retour de estPartag√© : \(_estPartag√© ? "‚úÖ" : "‚ùå") ")
    return _estPartag√©
}
    
    /// comme je n'arrive pas a faire marcher correctement la version utilisant  fetchShares
    /// l'objet est-il partag√© via CloudKit ?
    func estNuageux(_ item: Item) -> Bool {
        item.nuageux
        }

    
/// Fournir les informations relatives √† un partage d√©j√† existant, sans le creer.
/// charg√© lors de l'affichage de la Vue d√©tails (onAppear) d'un Item et depuis voirD√©tailsCollaboration d'un Groupe
    func obtenirUnPartageCK(_ item: Item, nom:String="", objectif:String="") -> CKShare? {
    print("„ÄΩÔ∏è Obtenir un partage pour l'item :", item.leTitre)
    // Si l'objet est d√©ja partag√©
    guard estPartag√©CK(objet: item) else {
        print("„ÄΩÔ∏è Pas de partage d√©j√† existant pour :",  item.leTitre)
        return nil }
        
    guard let dicoDesPartages = try? conteneur.fetchShares(matching: [item.objectID]),
    let partage = dicoDesPartages[item.objectID] else {
        print(" „ÄΩÔ∏è Impossible d'obtenir un partage CloudKit pour :", item.leTitre)
        return nil
        }
    
    print(" „ÄΩÔ∏è ON GO")
    let nbParticipants = partage.participants.count
//    partage[CKShare.SystemFieldKey.title] = "\(nbParticipants) Inviter √† participer √† l'√©v√©nement \n \"\(item.titre ?? "...")\" "
//    partage[CKShare.SystemFieldKey.shareType] = "com.arachante.nimbus.item" //.obtenir"
    partage.setValue("OBTENIR",             forKey: "NIMBUS_PARTAGE_ORIGINE")
    partage.setValue(item.id?.uuidString,   forKey: "NIMBUS_PARTAGE_ITEM_ID")
    partage.setValue(nom,                   forKey: "NIMBUS_PARTAGE_GROUPE_NOM")
    partage.setValue(objectif,              forKey: "NIMBUS_PARTAGE_GROUPE_OBJECTIF")



    let image = UIImage(named: "RejoindrePartage") //Rouge16") //RejoindrePartage")
    let donn√©esImage = image?.pngData()
        // 6/10/ 22 //let test = partage[CKShare.SystemFieldKey.thumbnailImageData]//.debugDescription
        // 6/10/ 22 //print("„ÄΩÔ∏è üåÄ image d√©j√† en cache :" , test ?? "bof", image?.imageRendererFormat, image?.size)
        // 6/10/ 22 //partage[CKShare.SystemFieldKey.thumbnailImageData] = donn√©esImage! as CKRecordValue
    print("„ÄΩÔ∏è...", nbParticipants , "üåÄ Obtention du partage CloudKit pour", item.titre ?? "...")
    return partage
}
    
    
/// Associer et fournir un partage CloudKit relatif √† l''iem (NSManagedObject) en param√™tre
/// Cr√©ation du partage.
/// Depuis les boutons recruter / partager des vues d√©tails des groupes ou items
    func associerUnPartageCK(_ item: Item, nom:String="", objectif:String="", message:String = "s'associer √† un partage") async -> CKShare? {
    var _partage : CKShare?
  do {
      // Associer un item √† un partage (nouveau ou pr√©existant)
      print("„ÄΩÔ∏è üî± üîÜ Associer un partage CK avec <", item.leTitre, ">")
      let (_, _partageTmp, _) = try await conteneur.share([item], to: nil)
      let nbParticipants = _partageTmp.participants.count
      // 6/10/ 22 //_partageTmp[CKShare.SystemFieldKey.title] = "\(nbParticipants) \(message)" //"Participer √† l'√©v√©nement\n\"\(item.titre ?? "...")\"\n(Cr√©ation de la collaboration)"
      let image = UIImage(named: "CreationPartage")
      let donn√©esImage = image?.pngData()
      // 6/10/ 22 //_partageTmp[CKShare.SystemFieldKey.thumbnailImageData] = donn√©esImage
//      _partageTmp[CKShare.SystemFieldKey.shareType] = "com.arachante.nimbus.item" //.associer"
      _partageTmp.setValue("ASSOCIER",          forKey: "NIMBUS_PARTAGE_ORIGINE")
      _partageTmp.setValue(item.id?.uuidString, forKey: "NIMBUS_PARTAGE_ITEM_ID")
      _partageTmp.setValue(nom,                 forKey: "NIMBUS_PARTAGE_GROUPE_NOM")
      _partageTmp.setValue(objectif,            forKey: "NIMBUS_PARTAGE_GROUPE_OBJECTIF")

      print("„ÄΩÔ∏è üî± üîÜ Nb de participants au partage :" , nbParticipants, ", ID :", _partageTmp.recordID, ", Type :", _partageTmp.recordType)
    _partage = _partageTmp
    }
  catch { print("‚ùóÔ∏èImpossible de creer un partage") }
  return _partage
  }


func jePeuxEditer(objet: NSManagedObject) -> Bool {
    conteneur.canUpdateRecord(forManagedObjectWith: objet.objectID)
    }

func jePeuxSupprimer(objet: NSManagedObject) -> Bool {
    conteneur.canDeleteRecord(forManagedObjectWith: objet.objectID)
    }

func jeSuisPropri√©taire(objet: NSManagedObject) -> Bool {
    print("‚ùóÔ∏èmake isOwner")
    guard estPartag√©CK(objet: objet) else { return false }
//        guard let partage = try? persistentContainer.fetchShares(matching: [object.objectID])[object.objectID] else {
    guard let partage = try? conteneur.fetchShares(matching: [objet.objectID])[objet.objectID] else {
    print("‚ùóÔ∏èmake Erreur obtention partage CloudKit")
    return false
    }
    if let currentUser = partage.currentUserParticipant, currentUser == partage.owner {
    return true
    }
    return false
}
} // Fin extension partage Cloud kit Controleur Persistance
   
// MARK: Aides au Partage : participant permission, methodes and propriet√©s ...
extension ControleurPersistance {
        
    func statuerConteneurCK() {
        
        conteneurCK.accountStatus { [self] (accountStatus, error) in
            switch accountStatus {
                case .available:              statut = "üåÄ iCloud Disponible"
                case .noAccount:              statut = "üåÄ Pas de compte iCloud"
                case .restricted:             statut = "üåÄ iCloud resteint"
                case .couldNotDetermine:      statut = "üåÄ Impossible de determin√© le status d'iCloud"
                case .temporarilyUnavailable: statut = "üåÄ iCloud temporairement indisponible"
                @unknown default:             statut = "üåÄ iCloud nuageux"
            }
        }
    
        conteneurCK.fetchUserRecordID { [self] (recordId, error) in
            guard let idRecord = recordId, error == nil else {
                print("üåÄ ERREUR", error ?? "!")
                return
                }
            enregistrement  = idRecord.recordName // Item, Groupe
            zone            = idRecord.zoneID.zoneName
            proprietaire    = idRecord.zoneID.ownerName
        
            conteneurCK.discoverUserIdentity(withUserRecordID: idRecord) { [self] (userID, error) in
                print("üåÄ=== contacts", userID?.contactIdentifiers.count ?? 0) //     ?? "...")
                    aUnCompte = userID?.hasiCloudAccount ?? false
                print("üåÄ=== t√©l", userID?.lookupInfo?.phoneNumber     ?? "...")
                print("üåÄ=== @ mail", userID?.lookupInfo?.emailAddress  ?? "...")
                    prenom = userID?.nameComponents?.givenName  ?? "..."
                    nom    = userID?.nameComponents?.familyName ?? "..."
                }
            } // fetchUserrecordID
        
        
        conteneurCK.requestApplicationPermission(.userDiscoverability) { [self] (status, error) in
            guard error == nil else {
                print("üåÄ ERREUR", error ?? "!")
                return
                }
            switch status {
                case .initialState:    permissions = "La permission n'est pas encore demand√©."
                case .couldNotComplete:permissions = "Erreur lors du traitement de la demande d'autorisation."
                case .denied:          permissions = "L'utilisateur refuse l'autorisation."
                case .granted:         permissions = "L'utilisateur accorde l'autorisation."
                @unknown default:     print("üåÄ ERREUR")
                }
            }
        
        conteneurCK.privateCloudDatabase.fetchAllRecordZones() { [self] (zone, erreur) in
            self.zone = "\(zone?.last?.zoneID.zoneName ?? "...")   \(zone?.count ?? 0)√©me"
            }

        conteneurCK.privateCloudDatabase.fetchAllSubscriptions() { [self] (abonnements, erreur) in
            guard let abonnements = abonnements, erreur == nil else {
                print("üåÄ ERREUR", erreur ?? "!")
                return
                }
            abonnements.forEach { abonnement_ in
                let id = abonnement_.subscriptionID
                switch abonnement_.subscriptionType {
                    case .database:   abonnement = "Base de donn√©es (\(id))"
                    case .query:      abonnement = "Requ√™te (\(id))"
                    case .recordZone: abonnement = "Zone (\(id))"
                    @unknown default: abonnement = "ERREUR (\(id))"
                    }
                }
            }
        


        let P1 = conteneurCK.publicCloudDatabase.databaseScope.rawValue
        let P2 = conteneurCK.privateCloudDatabase.databaseScope.rawValue
        let P3 = conteneurCK.sharedCloudDatabase.databaseScope.rawValue
        
        print("üåÄ 1,2,3  : ", P1, P2, P3)
        
        
        // PAS ICI
        let identifiantConteneurCK = "iCloud.Arachante.Espoir"
//        /// Conteneur CloudKit (ne pas confondre avec un conteneur CoreData    (NSPersistentContainer) )
//        let conteneur = CKContainer.init(identifier: identifiantConteneurCK)
        /// Options de construction d'u conteneur CoreData
        let options   = NSPersistentCloudKitContainerOptions(containerIdentifier: identifiantConteneurCK)

        switch (options.databaseScope) {
            case .public:     port√©e = "Publique"
            case .private:    port√©e = "Priv√©e"
            case .shared:     port√©e = "Partag√©e"
            @unknown default: port√©e = "ERREUR"
            }

        
        
        
        } // fin statuerConteneurCK
    
    func libell√©(de permission: CKShare.ParticipantPermission) -> String {
      switch permission {
          case .unknown:
            return "Inconnu" //"Unknown"
          case .none:
            return "Sans" //"None"
          case .readOnly:
            return "Lecture seule" //"Read-Only"
          case .readWrite:
            return "Lecture/√âcriture" //"Read-Write"
          @unknown default:
            fatalError("Une nouvelle valeur inconnue pour CKShare.Participant.Permission")
          }
      }

    func libell√©(de role: CKShare.ParticipantRole) -> String {
      switch role {
          case .owner:
            return "Propri√©taire" //"Owner"
          case .privateUser:
            return "Utilisateur Priv√©" // participant ? //"Private User"
          case .publicUser:
            return "Utilisateur Publique" // "Public User"
          case .unknown:
            return "Inconnu" //Unknown"
          @unknown default:
            fatalError("Une nouvelle valeur inconnue pour  CKShare.Participant.Role")
          }
      }

    func libell√©(de acceptanceStatus: CKShare.ParticipantAcceptanceStatus) -> String {
      switch acceptanceStatus {
          case .accepted:
            return "Accept√©" //"Accepted"
          case .removed:
            return "R√©voqu√©" //Enlev√©, R√©voqu√© "Removed"
          case .pending:
            return "Invit√©" //"Invited"
          case .unknown:
            return "Inconnu" //"Unknown"
          @unknown default:
            fatalError("Une nouvelle valeur inconnue pour CKShare.Participant.AcceptanceStatus")
          }
      }

    

} // Fin de nuage (Aides au Partage : participant permission, methodes and propriet√©s ...)







//MARK: - Gestion du mod√©le de donn√©es
extension ControleurPersistance {

    /// Lire les user info d'un attribut, d√©finis dans le mod√®le
    func annotation(objet:NSManagedObject, attribut:String, note:String) -> Any? {
        let entit√©:NSEntityDescription = objet.entity
        let attribut_:NSAttributeDescription = entit√©.attributesByName[attribut]!;
        let val = attribut_.userInfo![note]
        return val
        }
    
    /// Lire les configurations du mod√®le decrites dans le sch√©ma
    func configurations() {
        conteneur.managedObjectModel.configurations.forEach() {configuration in
            print("CONF Configuration :", configuration)
            }
        
        let ent = conteneur.managedObjectModel.entities(forConfigurationName: "TestConfig")
        
        print("CONF Premi√®re entit√© de la configuration TestConfig :", ent?.first?.name ?? "...")
            
        let confsGroupe = Groupe.entity().managedObjectModel.configurations
        print("CONF Derni√®re configuration (/", confsGroupe.count , ") de Groupe :", confsGroupe.last ?? "...")
        }
    
    /// Publication du sch√©ma du conteneur vers CloudKit.
    /// A √©xecuter uniquement si le sch√©ma a √©volu√©
    func publierSchema() {
        do {
            print("\n\n")
            // Cr√©e le sch√©ma CloudKit des magasins du conteneur associ√©s √† une base de donn√©es CloudKit.
            try conteneur.initializeCloudKitSchema(options: [NSPersistentCloudKitContainerSchemaInitializationOptions.printSchema])
            // existe aussi .dryRun :  pour uniquement valider le mod√®le et g√©n√®rer les enregistrements, SANS les t√©l√©charger vers CloudKit.
            l.log("\nPUBLICATION DU SCHEMA\n\n")
            }
        catch {l.error("\nERREUR √Ä LA PUBLICATION DU SCHEMA\n")}
        } // publier sch√©ma
    
    ///  Decommenter  pour charger le schema vers ClouKit
    //        do {
    //            try container.initializeCloudKitSchema(options: NSPersistentCloudKitContainerSchemaInitializationOptions())
    //        } catch {
    //            print(error)
    //        }
    
    
    } // Fin gestion mod√®le de donn√©es










//    // CF. :  https://www.raywenderlich.com/29934862-sharing-core-data-with-cloudkit-in-swiftui

